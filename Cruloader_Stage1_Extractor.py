###############################################################################
# Title: Cruloader Stage 1 Extractor                                          #
# Description: Cruloader stores an RC4 encrypted executable in its resources. #
#              This script extracts and decrypts this executable.             #
# Author: KrknSec                                                             #
# Date: 08/01/2021                                                            #
###############################################################################

from malduck import pe, rc4

# Get the path of cruloader binary
infile = input("Specify the path of the executable: ")


# Open the file to read
p = pe(open(infile, "rb").read(), fast_load=False)


# Set the offsets and sizes for the key and encrypted payload
keyOffset = 0xC
keySize = 0xF
dataOffset = 0x1C
dataSize = 0x15400


# Open the resource and extract the key
resource = p.resource("RT_RCDATA")
print("[+] Extracting RC4 key...")
RC4Key = resource[keyOffset:keyOffset+keySize]
if (RC4Key != 0):
    print("[+] RC4 key extracted!")
else:
    print("[!] Could not extract RC4 key!")


# Extract the encrypted payload
print("\n[+] Extracting encrypted payload...")
stage1Enc = resource[dataOffset:dataOffset+dataSize]
if (stage1Enc != 0):
    print("[+] Encrypted payload extracted!")
else:
    print("[!] Could not extract encrypted payload!")


# Decrypt the extracted payload using the key
print("\n[+] Decrypting payload with extracted key...")
stage1Dec = rc4(RC4Key, stage1Enc)
if (b"MZ" in stage1Dec):
    print("[+] Payload successfully decrypted!")
else:
    print("[!] Could not decrypt payload! No MZ header found!")


# Write the decrypted payload to a file
f = open("decrypted-payload.bin", "wb")
f.write(stage1Dec)
f.close()
